name: CI/CD Pipeline - Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # ========== JOB 1: BUILD E TESTES ==========
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necess√°rio para an√°lise do SonarQube
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
          
    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          VERSION="pr-${{ github.event.number }}-${{ github.sha }}"
        else
          VERSION="${{ github.ref_name }}-$(date +'%Y%m%d')-${{ github.sha }}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
        
    - name: Validate Maven configuration
      run: mvn validate
      working-directory: ./backend
      
    - name: Build with Maven
      run: mvn clean compile -B
      working-directory: ./backend
      
    - name: Run unit tests
      run: |
        mvn test -B \
          -Dmaven.test.failure.ignore=false \
          -Dspring.profiles.active=test
      working-directory: ./backend
      
    - name: Run integration tests
      run: |
        mvn verify -B \
          -Dspring.profiles.active=test \
          -DskipUnitTests=true
      working-directory: ./backend
      
    - name: Generate test reports
      if: always()
      run: mvn surefire-report:report
      working-directory: ./backend
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          backend/target/surefire-reports/
          backend/target/site/surefire-report.html
          
    - name: Code coverage with JaCoCo
      run: mvn jacoco:report
      working-directory: ./backend
      
    - name: Upload coverage to Codecov
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      uses: codecov/codecov-action@v4
      with:
        file: backend/target/site/jacoco/jacoco.xml
        fail_ci_if_error: false
      
    - name: Package application
      run: |
        mvn package -B \
          -DskipTests \
          -Drevision=${{ steps.version.outputs.version }}
      working-directory: ./backend
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: backend/target/*.jar
        retention-days: 30

  # ========== JOB 2: AN√ÅLISE DE QUALIDADE ==========
  quality-analysis:
    name: Quality Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
            
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Run SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: 57f61c20ca9301ec7170a1da34ca3ec00f93829b # ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        working-directory: ./backend

  # ========== JOB 3: SECURITY SCAN ==========
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
            
      - name: OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DsuppressOnlyInEffect=true
        working-directory: ./backend
            
      - name: Upload OWASP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: backend/target/dependency-check-report.html

  # ========== JOB 4: DEPLOY (SIMPLIFICADO) ==========
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build, quality-analysis, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: backend/target/
          
      - name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
        run: |
          echo "üöÄ Deploying version ${{ needs.build.outputs.version }} to ${{ github.event.inputs.environment || 'staging' }}"
          echo "üì¶ JAR file: $(ls backend/target/*.jar)"
          
          # Aqui voc√™ pode adicionar seus comandos espec√≠ficos de deploy
          # Por exemplo: rsync, scp, docker build/push, kubectl apply, etc.
          
          echo "‚úÖ Deployment completed successfully!"
          
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          # Adicione aqui seus testes de smoke
          # Por exemplo: curl health check, basic API tests, etc.
          echo "‚úÖ Smoke tests passed!"

  # ========== JOB 5: NOTIFICATION ==========
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Send notification
        if: always()
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment successful!"
            echo "üöÄ Version: ${{ needs.build.outputs.version }}"
            echo "üìç Environment: ${{ github.event.inputs.environment || 'staging' }}"
            echo "üë§ Deployed by: ${{ github.actor }}"
          else
            echo "‚ùå Deployment failed!"
          fi
          
          # Aqui voc√™ pode adicionar integra√ß√µes com Slack, Teams, email, etc.
          # Exemplo com curl para webhook do Slack:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Deployment status: ${{ needs.deploy.result }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
